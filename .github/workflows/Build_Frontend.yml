name: Build Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'npm'

    # Github Repository Secrets를 통해 환경 변수 파일을 생성합니다.
    - name: Generate Environment Variables File for Production
      run: |
        echo "REACT_APP_DEFAULT_URL=$REACT_APP_DEFAULT_URL" >> .env.production
        echo "REACT_APP_USERNAME=$REACT_APP_USERNAME" >> .env.production
        echo "REACT_APP_PASSWORD=$REACT_APP_PASSWORD" >> .env.production
      env:
        REACT_APP_DEFAULT_URL: ${{ secrets.REACT_APP_DEFAULT_URL }}
        REACT_APP_USERNAME: ${{ secrets.REACT_APP_USERNAME }}
        REACT_APP_PASSWORD: ${{ secrets.REACT_APP_PASSWORD }}

    - name: Install dependencies
      run: npm install

    - name: Build and test frontend
      run: |
        npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get image tag(version)
      id: image
      run: |
        VERSION=$(echo ${{ github.sha }} | cut -c1-8)
        echo VERSION=$VERSION
        echo "::set-output name=version::$VERSION"

    - name: Build, tag, and push image to Amazon ECR
      id: image-info
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend-app
        IMAGE_TAG: ${{ steps.image.outputs.version }}
      run: |
        echo "::set-output name=ecr_repository::$ECR_REPOSITORY"
        echo "::set-output name=image_tag::$IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Checkout for Kustomize repository
      uses: actions/checkout@v2
      with:
        # kubernetes yaml 파일 저장
        repository: ClassMore/k8s-manifest-repo # k8s yaml 파일이 있는 repo
        ref: main  # branch 이름
        token: ${{ secrets.ACTION_TOKEN }} # Github Action token을 발급받아서 repo secrect에 등록해줘야한다
        path: k8s-manifest-repo # 최상위 경로로 repository와 동일하게 설정

    - name: Update Kubernetes resources
      run: |
        echo \${{ steps.login-ecr.outputs.registry }}
        echo \${{ steps.image-info.outputs.ecr_repository }}
        echo \${{ steps.image-info.outputs.image_tag }}
        cd k8s-manifest-repo/overlays/dev/
        kustomize edit set image \${{ steps.login-ecr.outputs.registry}}/\${{ steps.image-info.outputs.ecr_repository }}=\${{ steps.login-ecr.outputs.registry}}/\${{ steps.image-info.outputs.ecr_repository }}:\${{ steps.image-info.outputs.image_tag }}
        cat kustomization.yaml

      # 수정된 kustomization.yaml 파일 commit push
    - name: Commit files
      run: |
        cd k8s-manifest-repo
        git config --global user.email "icj4153@hanyang.ac.kr"
        git config --global user.name "icj4153"
        git commit -am "스프링 서버 이미지 태그 업데이트"
        git push -u origin main